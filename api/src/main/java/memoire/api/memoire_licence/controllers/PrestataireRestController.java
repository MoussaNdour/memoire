/*
 * Created on 2025-09-24 ( 23:19:50 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 4.2.0
 */
package memoire.api.memoire_licence.controllers;

import java.util.List;

import memoire.api.memoire_licence.dto.request.PrestataireRequestDTO;
import memoire.api.memoire_licence.dto.response.PrestataireResponseDTO;
import memoire.api.memoire_licence.services.interfaces.PrestataireServiceInterface;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;



@RestController
@RequestMapping(value = "/api/v1/prestataire", produces = MediaType.APPLICATION_JSON_VALUE)
public class PrestataireRestController {


	@Autowired
	private PrestataireServiceInterface service ; // injected
	

	/**
	 * Get ALL
	 *
	 * @return
	 */
	@GetMapping("")
	protected ResponseEntity<List<PrestataireResponseDTO>> findAll() {
    	return ResponseEntity.ok(service.findAll());
    }
    
    /**
     * Get ONE identified by the given PK
	 *
	 * @param idprestataire
     * @return 200 or 404 
     */
    @GetMapping("/{idprestataire}")
    protected ResponseEntity<?> findById(@PathVariable int idprestataire) {
		PrestataireResponseDTO prestataire=service.findById(idprestataire);
		if(prestataire==null)
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Il n'existe pas de prestataire avec cet id");
		else{
			return ResponseEntity.ok(prestataire);
		}
    }

    
	/**
 	 * Create if doesn't exist 
	 *
	 * @param prestataireDTO
	 * @return 201 created or 409 conflict
	 */
	@PostMapping("")
	protected ResponseEntity<?> create(@RequestBody PrestataireRequestDTO prestataireDTO) {
		boolean test=service.create(prestataireDTO);
		if(test)
			return ResponseEntity.ok("Prestataire creer avec succes");
		else
			return ResponseEntity.status(HttpStatus.CONFLICT).body("Il existe deja un utilisateur avec ce mail");
	}

	/**
	 * Update or create
	 *
	 * @param idprestataire
	 * @param prestataireDTO
	 * @return 200 updated or created
	 */
	@PutMapping("/{idprestataire}")
	protected ResponseEntity<?> update(@PathVariable int idprestataire, @RequestBody PrestataireRequestDTO prestataireDTO) {
		boolean test=service.update(idprestataire,prestataireDTO);
		if(test)
			return ResponseEntity.ok("Prestataire mis a jour avec succes");
		else
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Il n'existe pas un prestataire avec cet id");
	}


	/**
	 * Delete by PK
	 * @param idprestataire
	 * @return 204 deleted or 404 not found
	 */
	@DeleteMapping("/{idprestataire}")
	protected ResponseEntity<?> deleteById(@PathVariable int idprestataire) {
		service.deleteById(idprestataire);
		return ResponseEntity.ok("Prestataire supprimer avec succes");
	}

}
