/*
 * Created on 2025-09-24 ( 23:19:50 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 4.2.0
 */
package memoire.api.memoire_licence.controllers;

import java.util.List;

import memoire.api.memoire_licence.dto.request.ServiceRequestDTO;
import memoire.api.memoire_licence.dto.response.ServiceResponseDTO;
import memoire.api.memoire_licence.services.classes.ServiceForServiceEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;



@RestController
@RequestMapping(value = "/api/v1/service", produces = MediaType.APPLICATION_JSON_VALUE)
public class ServiceRestController {



	@Autowired
	private ServiceForServiceEntity service ; // injected
    
	/**
	 * Get ALL
	 *
	 * @return
	 */
	@GetMapping("")
	protected ResponseEntity<List<ServiceResponseDTO>> findAll() {
		return ResponseEntity.ok(service.findAll());
    }
    
    /**
     * Get ONE identified by the given PK
	 *
	 * @param idservice
     * @return 200 or 404 
     */
    @GetMapping("/{idservice}")
    protected ResponseEntity<?> findById(@PathVariable int idservice) {
		ServiceResponseDTO serviceDTO=service.findById(idservice);
		if(serviceDTO!=null)
			return ResponseEntity.ok(serviceDTO);
		else{
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Service non trouve pour cet id");
		}
    }

    
	/**
 	 * Create if doesn't exist 
	 *
	 * @param serviceDTO
	 * @return 201 created or 409 conflict
	 */
	@PostMapping("")
	protected ResponseEntity<?> create(@RequestBody ServiceRequestDTO serviceDTO) {
		service.create(serviceDTO);
		return ResponseEntity.ok("Service cree avec succes");
	}


	@PutMapping("/{idservice}")
	protected ResponseEntity<?> update(@PathVariable int idservice, @RequestBody ServiceRequestDTO serviceDTO) {
		service.update(idservice,serviceDTO);
		return ResponseEntity.ok("Service mis a jour avec succes");
	}



	/**
	 * Delete by PK 
	 *
	 * @param idservice
	 * @return 204 deleted or 404 not found
	 */
	@DeleteMapping("/{idservice}")
	protected ResponseEntity<?> deleteById(@PathVariable int idservice) {
		service.delete(idservice);

		return ResponseEntity.ok("Service supprimer avec succes");
	}

}
