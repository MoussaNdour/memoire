/*
 * Created on 2025-09-24 ( 23:19:50 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 4.2.0
 */
package memoire.api.memoire_licence.controllers;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import jakarta.validation.Valid;
import memoire.api.memoire_licence.dto.request.ServiceRequestDTO;
import memoire.api.memoire_licence.dto.response.ServiceResponseDTO;
import memoire.api.memoire_licence.entities.Categorie;
import memoire.api.memoire_licence.repositories.CategorieRepository;
import memoire.api.memoire_licence.services.classes.ServiceForServiceEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;



@RestController
@RequestMapping(value = "/api/v1/service", produces = MediaType.APPLICATION_JSON_VALUE)
public class ServiceRestController {



	@Autowired
	private ServiceForServiceEntity service ; // injected

	@Autowired
	private CategorieRepository categorieRepository;
    
	/**
	 * Get ALL
	 *
	 * @return
	 */
	@GetMapping("")
	public ResponseEntity<List<ServiceResponseDTO>> findAll() {
		return ResponseEntity.ok(service.findAll());
    }
    
    /**
     * Get ONE identified by the given PK
	 *
	 * @param idservice
     * @return 200 or 404 
     */
    @GetMapping("/{idservice}")
    public ResponseEntity<?> findById(@PathVariable int idservice) {
		ServiceResponseDTO serviceDTO=service.findById(idservice);
		if(serviceDTO!=null)
			return ResponseEntity.ok(serviceDTO);
		else{
			Map<String,String> response=new HashMap<>();
			response.put("erreur:","Service non trouve pour cet id");

			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
		}
    }

    
	/**
 	 * Create if doesn't exist 
	 *
	 * @param serviceDTO
	 * @return 201 created or 409 conflict
	 */
	@PostMapping("")
	public ResponseEntity<?> create(@Valid @RequestBody ServiceRequestDTO serviceDTO) {
		Categorie categorie=categorieRepository.findById(serviceDTO.getIdcategorie()).orElse(null);

		Map<String,String> response=new HashMap<>();

		if(categorie==null){
			response.put("erreur","L'id du categorie est incorrecte");
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
		}

		service.create(serviceDTO);

		response.put("message","Service cree avec succes");

		return ResponseEntity.ok(response);

	}


	@PutMapping("/{idservice}")
	public ResponseEntity<?> update(@PathVariable int idservice, @Valid @RequestBody ServiceRequestDTO serviceDTO) {
		Categorie categorie=categorieRepository.findById(serviceDTO.getIdcategorie()).orElse(null);

		Map<String,String> response=new HashMap<>();

		if(categorie==null){
			response.put("erreur","L'id du categorie est incorrecte");
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
		}

		service.update(idservice,serviceDTO);

		response.put("message","Service mis a jour avec succes");

		return ResponseEntity.ok(response);

	}



	/**
	 * Delete by PK 
	 *
	 * @param idservice
	 * @return 204 deleted or 404 not found
	 */
	@DeleteMapping("/{idservice}")
	public ResponseEntity<?> deleteById(@PathVariable int idservice) {
		service.delete(idservice);

		Map<String,String> response=new HashMap<>();
		response.put("message","Service supprimer avec succes");

		return ResponseEntity.ok(response);
	}

}
