/*
 * Created on 2025-09-24 ( 23:19:47 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 4.2.0
 */
package memoire.api.memoire_licence.controllers;

import java.util.List;

import memoire.api.memoire_licence.dto.request.AdministrateurRequestDTO;
import memoire.api.memoire_licence.dto.response.AdministrateurResponseDTO;
import memoire.api.memoire_licence.services.classes.AdministrateurService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.CrossOrigin;


@RestController
@CrossOrigin(origins="http://localhost:4200")
@RequestMapping("/api/v1/administrateur")
public class AdministrateurRestController {


	@Autowired
	private AdministrateurService service ;

	/**
	 * Get ALL
	 *
	 * @return
	 */
	@GetMapping("")
	protected ResponseEntity<List<AdministrateurResponseDTO>> findAll() {
    	return ResponseEntity.ok(service.findAll());
    }
    
    /**
     * Get ONE identified by the given PK
	 *
	 * @param idadmin
     * @return 200 or 404
     */
    @GetMapping("/{idadmin}")
    protected ResponseEntity<?> findById(@PathVariable int idadmin) {
    	AdministrateurResponseDTO admin=service.findById(idadmin);
		if(admin!=null){
			return ResponseEntity.ok(admin);
		}
		else{
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Administrateur non trouve pour cet id");
		}
    }

    
	/**
 	 * Create if doesn't exist 
	 *
	 * @param administrateurDTO
	 * @return 201 created or 409 conflict
	 */
	@PostMapping("")
	protected ResponseEntity<?> create(@RequestBody AdministrateurRequestDTO administrateurDTO) {
    	boolean test=service.save(administrateurDTO);

		if(test)
			return ResponseEntity.ok("Admin cree avec succes");
		else
			return ResponseEntity.status(HttpStatus.CONFLICT).body("Il existe deja un utilisateur avec ce mail");
	}



	/**
 	 * Update if exists 
	 *
	 * @param administrateurDTO
	 * @return 200 updated or 404 not found
	 */
	@PutMapping("/{idadmin}")
	protected ResponseEntity<?> update(@PathVariable int idadmin, @RequestBody AdministrateurRequestDTO administrateurDTO) {
    	service.update(idadmin,administrateurDTO);

		return ResponseEntity.ok("Administrateur mis a jour");
	}



	/**
	 * Delete by PK 
	 *
	 * @param idadmin
	 * @return 204 deleted or 404 not found
	 */
	@DeleteMapping("/{idadmin}")
	protected ResponseEntity<?> deleteById( @PathVariable int idadmin) {
    	service.deleteById(idadmin);

		return ResponseEntity.ok("L'amin a bien ete supprimer");
	}

}
